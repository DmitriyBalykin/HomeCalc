using HomeCalc.Model.DataModels;
using HomeCalc.Model.DbService;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HomeCalc.Presentation.Models
{
    public class StorageService
    {
        DataService DBService;
        private static StorageService instance;

        public event EventHandler TypesUpdated;
        
        public StorageService()
        {
            DBService = DataService.GetInstance();
        }

        internal static StorageService GetInstance()
        {
            if (instance == null)
            {
                instance = new StorageService();
            }
            return instance;
        }

        public bool SaveSettings(SettingsModel settings)
        {
            return DBService.SaveSettings(settings);
        }
        public SettingsModel LoadSettings()
        {
            return DBService.LoadSettings();
        }
        public bool SavePurchase(Purchase purchase)
        {
            return DBService.SavePurchase(PurchaseToModel(purchase));
        }
        public bool SavePurchaseBulk(List<Purchase> purchases)
        {

            return DBService.SavePurchaseBulk(purchases.Select(p => PurchaseToModel(p)));
        }
        public bool SavePurchaseType(PurchaseType purchaseType)
        {
            PurchaseTypesCache.IsActual = false;
            var result = DBService.SavePurchaseType(TypeToModel(purchaseType));
            if (result)
            {
                TypeUpdated();
            }
            return result;
        }
        public Purchase LoadPurchase(int id)
        {
            return ModelToPurchase(DBService.LoadPurchase(id));
        }
        public IList<Purchase> LoadPurchaseList(SearchRequest.Requests enumFilter)
        {
            IList<Purchase> list = new List<Purchase>();
            switch (enumFilter)
            {
                case SearchRequest.Requests.Empty:
                    list = DBService.LoadCompletePurchaseList().Select(p => ModelToPurchase(p)).ToList();
                    break;
            }
            return list;
        }
        public IList<Purchase> LoadPurchaseList(SearchRequest filter)
        {
            return DBService.LoadPurchaseList(
                p => (!filter.SearchByName || p.Name.Contains(filter.NameFilter)) &&
                     (!filter.SearchByType || p.Type == TypeToModel(filter.Type)) &&
                     (!filter.SearchByDate || (p.Timestamp > filter.DateStart.Ticks) && (p.Timestamp <= filter.DateEnd.Ticks)) &&
                     (!filter.SearchByCost || (p.TotalCost >= filter.CostStart) && (p.TotalCost <= filter.CostEnd))
                ).Select(p => ModelToPurchase(p)).ToList();
        }
        public IList<PurchaseType> LoadPurchaseTypeList()
        {
            if (!PurchaseTypesCache.IsActual)
            {
                PurchaseTypesCache.Cache = DBService.LoadPurchaseTypeList().Select(p => ModelToType(p)).ToList();
            }
            return PurchaseTypesCache.Cache;
        }
        public PurchaseType ResolvePurchaseType(int id = -1, string name = null)
        {
            if (id > -1)
            {
                return LoadPurchaseTypeList().Where(type => type.TypeId == id).SingleOrDefault();
            }
            else if (name != null)
            {
                var matchedType = LoadPurchaseTypeList().Where(type => type.Name == name).SingleOrDefault();
                if (matchedType == null)
                {
                    SavePurchaseType(new PurchaseType {
                        Name = name
                    });
                    //type id generated by DBMS as Primary Key
                    matchedType = LoadPurchaseTypeList().Where(type => type.Name == name).SingleOrDefault();
                }
                return matchedType;
            }
            else
            {
                return null;
            }
        }
        private PurchaseType ModelToType(PurchaseTypeModel model)
        {
            return new PurchaseType { TypeId = (int)model.TypeId, Name = model.Name };
        }
        private PurchaseTypeModel TypeToModel(PurchaseType type)
        {
            return new PurchaseTypeModel { TypeId = type.TypeId, Name = type.Name };
        }
        private Purchase ModelToPurchase(PurchaseModel model)
        {
            return new Purchase {
                Date = new DateTime(model.Timestamp),
                ItemCost = model.ItemCost,
                ItemsNumber = model.ItemsNumber,
                Name = model.Name,
                TotalCost = model.TotalCost,
                Type = ModelToType(model.Type)
            };
        }
        private PurchaseModel PurchaseToModel(Purchase purchase)
        {
            return new PurchaseModel
            {
                Timestamp = purchase.Date.Ticks,
                Name = purchase.Name,
                ItemsNumber = purchase.ItemsNumber,
                ItemCost = purchase.ItemCost,
                TotalCost = purchase.TotalCost,
                TypeId = purchase.Type.TypeId
            };
        }

        private void TypeUpdated()
        {
            if (TypesUpdated != null)
            {
                TypesUpdated.Invoke(null, EventArgs.Empty);
            }
        }
    }

    class PurchaseTypesCache
    {
        public static List<PurchaseType> Cache { get; set; }
        private static bool isActual;
        public static bool IsActual
        {
            get
            {
                return isActual && Cache.Count > 0;
            }
            set
            {
                isActual = value;
            }
        }
    }
}
